# -*- coding: utf-8 -*-
"""Bangladesh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1giMZ4PXYfZfXgSoeLEUVrgohhxk7NYm2
"""

!pip install datasets
!pip install pystac
!pip install planetary_computer
!pip install rioxarray
!pip install pandas
!pip install numpy

# Commented out IPython magic to ensure Python compatibility.
import os
import sys
import csv
import glob
import joblib
import datasets
import numpy as np
import pandas as pd
from pathlib import Path

# Machine Learning imports
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier as cumlRF
from sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score
from sklearn.metrics import classification_report
from sklearn.model_selection import RandomizedSearchCV, KFold
from itertools import combinations
from sklearn.preprocessing import PolynomialFeatures
from sklearn.decomposition import PCA

# Visualization imports
import seaborn as sns
import matplotlib.pyplot as plt
import warnings

# Geospatial related imports
from osgeo import gdalconst
from osgeo import gdal

from pprint import pprint

# Ignore a few warnings for cleaner output
warnings.filterwarnings('ignore')
# %matplotlib inline

"""# **MODIS Land Surface Temperature/Emissivity 8-Day**
MODIS Land Surface Temperature/Emissivity 8-Day
"""

import pystac
import planetary_computer
import rioxarray
import matplotlib.pyplot as plt

# Dataset URL
item_url = "https://planetarycomputer.microsoft.com/api/stac/v1/collections/jrc-gsw/items/80E_30Nv1_3_2020"

# Load the individual item metadata and sign the assets
item = pystac.Item.from_file(item_url)
signed_item = planetary_computer.sign(item)

# Open the data asset (change this to the specific asset key you want to visualize)
asset_key = "change"
asset_href = signed_item.assets[asset_key].href
ds = rioxarray.open_rasterio(asset_href)

# Select a specific band for visualization (adjust '1' to the desired band index)
selected_band = ds.sel(band=1)

# Plot the raster data using Matplotlib
plt.figure(figsize=(10, 10))
selected_band.plot.imshow(cmap="viridis", add_colorbar=True)
plt.title(f"Raster Data Visualization - {asset_key}")
plt.show()

"""# **HREA: High Resolution Electricity Access**
Settlement-level measures of electricity access, reliability, and usage derived from VIIRS satellite imagery
"""

import pystac
import planetary_computer
import rioxarray
import matplotlib.pyplot as plt

# Item URL for HREA data in Bangladesh
item_url = "https://planetarycomputer.microsoft.com/api/stac/v1/collections/hrea/items/HREA_Bangladesh_2019_v1"

# Load the individual item metadata and sign the assets
item = pystac.Item.from_file(item_url)
signed_item = planetary_computer.sign(item)

# Open one of the data assets (other asset keys to use: 'light-composite', 'night-proportion', 'estimated-brightness')
asset_key = "lightscore"
asset_href = signed_item.assets[asset_key].href
ds = rioxarray.open_rasterio(asset_href)

# Plot the raster data using Matplotlib
plt.figure(figsize=(10, 10))
plt.imshow(ds.data[0], cmap="viridis")
plt.colorbar(label=f"{asset_key} values")
plt.title(f"HREA Data Visualization - {asset_key}")
plt.show()

# Item URL for HREA data in Bangladesh
item_url = "https://planetarycomputer.microsoft.com/api/stac/v1/collections/hrea/items/HREA_Bangladesh_2019_v1"

# Load the individual item metadata and sign the assets
item = pystac.Item.from_file(item_url)
signed_item = planetary_computer.sign(item)

# Open one of the data assets (other asset keys to use: 'light-composite', 'night-proportion', 'estimated-brightness')
asset_key = "light-composite"
asset_href = signed_item.assets[asset_key].href
ds = rioxarray.open_rasterio(asset_href)

# Plot the raster data using Matplotlib
plt.figure(figsize=(10, 10))
plt.imshow(ds.data[0], cmap="viridis")
plt.colorbar(label=f"{asset_key} values")
plt.title(f"HREA Data Visualization - {asset_key}")
plt.show()

import pystac
import planetary_computer
import rioxarray
import matplotlib.pyplot as plt

# Item URL for HREA data in Bangladesh
item_url = "https://planetarycomputer.microsoft.com/api/stac/v1/collections/hrea/items/HREA_Bangladesh_2019_v1"

# Load the individual item metadata and sign the assets
item = pystac.Item.from_file(item_url)
signed_item = planetary_computer.sign(item)

# Open one of the data assets (other asset keys to use: 'light-composite', 'night-proportion', 'estimated-brightness')
asset_key = "night-proportion"
asset_href = signed_item.assets[asset_key].href
ds = rioxarray.open_rasterio(asset_href)

# Plot the raster data using Matplotlib
plt.figure(figsize=(10, 10))
plt.imshow(ds.data[0], cmap="viridis")
plt.colorbar(label=f"{asset_key} values")
plt.title(f"HREA Data Visualization - {asset_key}")
plt.show()

# Item URL for HREA data in Bangladesh
item_url = "https://planetarycomputer.microsoft.com/api/stac/v1/collections/hrea/items/HREA_Bangladesh_2019_v1"

# Load the individual item metadata and sign the assets
item = pystac.Item.from_file(item_url)
signed_item = planetary_computer.sign(item)

# Open one of the data assets (other asset keys to use: 'light-composite', 'night-proportion', 'estimated-brightness')
asset_key = "estimated-brightness"
asset_href = signed_item.assets[asset_key].href
ds = rioxarray.open_rasterio(asset_href)

# Plot the raster data using Matplotlib
plt.figure(figsize=(10, 10))
plt.imshow(ds.data[0], cmap="viridis")
plt.colorbar(label=f"{asset_key} values")
plt.title(f"HREA Data Visualization - {asset_key}")
plt.show()

"""# **weather and climate change**"""

!pip install openmeteo-requests
!pip install requests-cache retry-requests numpy pandas

import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = -1)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://archive-api.open-meteo.com/v1/archive"
params = {
	"latitude": 25.0667,
	"longitude": 91.4072,
	"start_date": "2023-11-12",
	"end_date": "2024-01-01",
	"hourly": "temperature_2m",
	"timezone": "auto"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°E {response.Longitude()}°N")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
	start = pd.to_datetime(hourly.Time(), unit = "s"),
	end = pd.to_datetime(hourly.TimeEnd(), unit = "s"),
	freq = pd.Timedelta(seconds = hourly.Interval()),
	inclusive = "left"
)}
hourly_data["temperature_2m"] = hourly_temperature_2m

hourly_dataframe = pd.DataFrame(data = hourly_data)
print(hourly_dataframe)

import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry
import matplotlib.pyplot as plt

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://archive-api.open-meteo.com/v1/archive"
params = {
   	"latitude": 25.0667,
	  "longitude": 91.4072,
    "start_date": "2023-11-12",
    "end_date": "2024-01-01",
    "hourly": "temperature_2m",
    "timezone": "auto"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°E {response.Longitude()}°N")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
    start=pd.to_datetime(hourly.Time(), unit="s"),
    end=pd.to_datetime(hourly.TimeEnd(), unit="s"),
    freq=pd.Timedelta(seconds=hourly.Interval()),
    inclusive="left"
)}
hourly_data["temperature_2m"] = hourly_temperature_2m

hourly_dataframe = pd.DataFrame(data=hourly_data)

# Plot the hourly temperature
plt.figure(figsize=(12, 6))
plt.plot(hourly_dataframe["date"], hourly_dataframe["temperature_2m"], marker='o', linestyle='-', color='blue')
plt.title("Hourly Temperature")
plt.xlabel("Date")
plt.ylabel("Temperature (°C)")
plt.xticks(rotation=45, ha='right')
plt.grid(True)
plt.tight_layout()
plt.show()

import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry
import matplotlib.pyplot as plt

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://archive-api.open-meteo.com/v1/archive"
params = {
  	"latitude": 25.0667,
	  "longitude": 91.4072,
    "start_date": "2000-01-01",
    "end_date": "2024-01-01",
    "hourly": "temperature_2m",
    "timezone": "auto"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°E {response.Longitude()}°N")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
    start=pd.to_datetime(hourly.Time(), unit="s"),
    end=pd.to_datetime(hourly.TimeEnd(), unit="s"),
    freq=pd.Timedelta(seconds=hourly.Interval()),
    inclusive="left"
)}
hourly_data["temperature_2m"] = hourly_temperature_2m

hourly_dataframe = pd.DataFrame(data=hourly_data)

# Plot the hourly temperature
plt.figure(figsize=(12, 6))
plt.plot(hourly_dataframe["date"], hourly_dataframe["temperature_2m"], marker='o', linestyle='-', color='blue')
plt.title("Hourly Temperature")
plt.xlabel("Date")
plt.ylabel("Temperature (°C)")
plt.xticks(rotation=45, ha='right')
plt.grid(True)
plt.tight_layout()
plt.show()

import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry
import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://archive-api.open-meteo.com/v1/archive"
params = {
	  "latitude": 25.0667,
  	"longitude": 91.4072,
    "start_date": "1950-01-01",
    "end_date": "2024-01-01",
    "hourly": "temperature_2m",
    "timezone": "auto"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()

hourly_data = {
    "latitude": np.repeat(response.Latitude(), len(hourly_temperature_2m)),
    "longitude": np.repeat(response.Longitude(), len(hourly_temperature_2m)),
    "date": pd.to_datetime(hourly.Time(), unit="s"),
    "temperature_2m": hourly_temperature_2m
}

hourly_dataframe = pd.DataFrame(data=hourly_data)

# Create a 3D plot
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

# Plot the spherical contour graph
scatter = ax.scatter(hourly_dataframe['longitude'], hourly_dataframe['latitude'],
                     hourly_dataframe['temperature_2m'], c=hourly_dataframe['temperature_2m'],
                     cmap='viridis', marker='o', s=20)

# Customize the plot
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
ax.set_zlabel('Temperature (°C)')
ax.set_title('Spherical Contour Graph - Temperature')

# Add a colorbar
cbar = plt.colorbar(scatter)
cbar.set_label('Temperature (°C)')

# Show the plot
plt.show()

import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry
import matplotlib.pyplot as plt

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://archive-api.open-meteo.com/v1/archive"
params = {
  	"latitude": 25.0667,
	  "longitude": 91.4072,
    "start_date": "2024-01-01",
    "end_date": "2024-01-01",
    "hourly": "temperature_2m",
    "timezone": "auto"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()

hourly_data = {
    "date": pd.to_datetime(hourly.Time(), unit="s"),
    "temperature_2m": hourly_temperature_2m
}

hourly_dataframe = pd.DataFrame(data=hourly_data)

# Split the data into multiple time periods or categories
periods = [hourly_dataframe['date'].min(), hourly_dataframe['date'].max()]

# Create subplots for each time period or category
fig, axes = plt.subplots(nrows=1, ncols=len(periods), figsize=(12, 6))

# Plot a pie chart for each time period or category
for i, period in enumerate(periods):
    subset = hourly_dataframe[hourly_dataframe['date'] == period]
    sizes = subset['temperature_2m'].value_counts(normalize=True).sort_index()
    labels = sizes.index
    axes[i].pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    axes[i].set_title(f'Temperature Distribution - {period.date()}')

plt.tight_layout()
plt.show()

import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry
import matplotlib.pyplot as plt

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# Common parameters for both date ranges
params_common = {
  	"latitude": 25.0667,
  	"longitude": 91.4072,
    "hourly": "temperature_2m",
    "timezone": "auto"
}

# First date range
params_1 = {
    **params_common,
    "start_date": "2023-11-12",
    "end_date": "2024-01-01",
}

# Second date range
params_2 = {
    **params_common,
    "start_date": "2023-12-02",
    "end_date": "2024-01-01",
}

# Function to fetch temperature data
def fetch_temperature_data(params):
    responses = openmeteo.weather_api("https://archive-api.open-meteo.com/v1/archive", params=params)
    response = responses[0]
    hourly = response.Hourly()
    return pd.DataFrame({
        "date": pd.to_datetime(hourly.Time(), unit="s"),
        "temperature_2m": hourly.Variables(0).ValuesAsNumpy()
    })

# Fetch temperature data for both date ranges
df_1 = fetch_temperature_data(params_1)
df_2 = fetch_temperature_data(params_2)

# Plotting
plt.figure(figsize=(12, 6))
plt.plot(df_1['date'], df_1['temperature_2m'], label='Date Range 1')
plt.plot(df_2['date'], df_2['temperature_2m'], label='Date Range 2')
plt.title('Comparison of Temperature Over Different Date Ranges')
plt.xlabel('Date')
plt.ylabel('Temperature (°C)')
plt.legend()
plt.xticks(rotation=45, ha='right')
plt.show()

import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry
import matplotlib.pyplot as plt

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# Common parameters for both date ranges
params_common = {
	  "latitude": 25.0667,
	  "longitude": 91.4072,
    "hourly": "temperature_2m",
    "timezone": "auto"
}

# First date range
params_1 = {
    **params_common,
    "start_date": "2023-11-12",
    "end_date": "2023-12-01",
}

# Second date range
params_2 = {
    **params_common,
    "start_date": "2023-12-02",
    "end_date": "2024-01-01",
}

# Function to fetch temperature data
def fetch_temperature_data(params):
    responses = openmeteo.weather_api("https://archive-api.open-meteo.com/v1/archive", params=params)
    response = responses[0]
    hourly = response.Hourly()
    return pd.DataFrame({
        "date": pd.to_datetime(hourly.Time(), unit="s"),
        "temperature_2m": hourly.Variables(0).ValuesAsNumpy()
    })

# Fetch temperature data for both date ranges
df_1 = fetch_temperature_data(params_1)
df_2 = fetch_temperature_data(params_2)

# Calculate average temperature for each date range
avg_temp_1 = df_1['temperature_2m'].mean()
avg_temp_2 = df_2['temperature_2m'].mean()

# Plotting bar chart
plt.figure(figsize=(8, 6))
plt.bar(['Date Range 1', 'Date Range 2'], [avg_temp_1, avg_temp_2], color=['blue', 'orange'])
plt.title('Average Temperature Comparison for Different Date Ranges')
plt.xlabel('Date Range')
plt.ylabel('Average Temperature (°C)')
plt.show()